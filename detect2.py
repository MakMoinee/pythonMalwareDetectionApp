from scapy.all import *
import sys
import os

# Function to determine the type of payload based on file signatures
def get_payload_type(payload):
    if payload.startswith(b'\xFF\xD8\xFF\xE0'):  # JPEG magic number
        return "Image (JPEG)"
    elif payload.startswith(b'\x89\x50\x4E\x47\x0D\x0A\x1A\x0A'):  # PNG magic number
        return "Image (PNG)"
    elif payload.startswith(b'\x52\x49\x46\x46'):  # WAV magic number
        return "Audio (WAV)"
    elif payload.startswith(b'\x00\x00\x01\xBA') or payload.startswith(b'\x47\x49\x46\x38'):  # MPEG or GIF magic number
        return "Video (MPEG) or Image (GIF)"
    else:
        return "Unknown"

# Callback function to process captured packets
def packet_callback(packet):
    try:
        packetType = ""
        if packet.haslayer(Raw):
            payload = packet[Raw].load
            if payload:
                payload_type = get_payload_type(payload)
                packetType = payload_type
                print(f"Packet Type: {payload_type}")
            else:
                packetType = "Unknown"
                print("Packet does not contain recognizable payload data")
        else:
            packetType = "Unknown"
            print("Packet does not contain payload data")

        # Write packet details to the log file
        log_file.write(f"Packet Type: {packetType}\nPacket Details: {packet.summary()}\n\n")
    except Exception as e:
        print(f"Error processing packet: {e}")
        print(packet.summary())

try:
    current_id = sys.argv[1] if len(sys.argv) > 1 else 'default_id'
    log_file_path = f"./logs/{current_id}.txt"
    
    # Delete old log file if it exists
    if os.path.exists(log_file_path):
        os.remove(log_file_path)

    # Open the log file in append mode
    with open(log_file_path, "a") as log_file:
        # Capture packets on the specified interface
        sniff(iface='Wi-Fi', prn=packet_callback, timeout=10)

except Exception as e:
    print(f"Error: {e}")
