from quart import Quart, jsonify, request,send_from_directory
from scapy.all import *
import cv2
import asyncio
import subprocess
import socket  # Import the socket library
from quart_cors import cors

app = Quart(__name__)
app = cors(app)

ip_started = {}


def is_rtsp_accessible(rtsp_url):
    try:
        cap = cv2.VideoCapture(rtsp_url)
        if cap.isOpened():
            cap.release()
            return True
    except Exception as e:
        print(f"Error: {e}")
    return False

def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(('8.8.8.8', 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except Exception as e:
        print(f"Error getting local IP: {e}")
        return None

# Endpoint to retrieve users
@app.route('/detect', methods=['GET'])
async def start_camera():
    id = request.args.get('id')  # Get the 'ip' parameter from the request query string
    if not id:
        return jsonify({"message": "IP address is missing in the request parameters"}), 400
    
    if id:
        command =  f"start cmd /k \"cd /d D:\\work\\pythonMalwareDetectionApp && activate && python detect2.py {id}\""
        subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return jsonify({"id": id, "status": "success"}), 200
    else:
        return jsonify({"id": id, "status": "failed"}), 500
    

@app.route('/logs/<path:filename>', methods=['GET'])
async def get_logs(filename):
    return await send_from_directory('./logs', filename)


if __name__ == '__main__':
    local_ip = get_local_ip()  # Get the local IP address dynamically
    if local_ip:
        app.run(host=local_ip, debug=True)
    else:
        print("Failed to retrieve local IP address.")
