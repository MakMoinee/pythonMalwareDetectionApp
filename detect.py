import pandas as pd
import joblib
from scapy.all import sniff, Ether, IP, TCP  # Import necessary scapy modules for packet capture

# Load the trained model
classifier = joblib.load('malware_detection_model.joblib')

# Define a function to process each captured packet
def process_packet(packet):
    if Ether in packet and IP in packet and TCP in packet:  # Filter TCP/IP packets (modify as needed)
        # Extract relevant features from the packet (adjust this based on your dataset)
        packet_features = {
            'millisecond': packet.time,
            # Extract other packet features here...
        }

        # Create a DataFrame from the extracted features
        incoming_packet = pd.DataFrame(packet_features, index=[0])

        # Extract features for prediction
        incoming_packet_features = incoming_packet.drop('hash', axis=1)  # Adjust according to your data
        incoming_packet_features = incoming_packet_features.values.reshape(1, -1)

        # Use the loaded classifier to predict whether the packet is malware or not
        prediction = classifier.predict(incoming_packet_features)

        # Display the prediction
        if prediction[0] == 'malware':
            print("The incoming packet is predicted as malware.")
        else:
            print("The incoming packet is predicted as non-malware.")

# Start capturing packets using scapy's sniff function
# Adjust the filter and count parameters as needed
sniff(filter="tcp and (port 80 or port 443)", prn=process_packet, count=10)  # Capture 10 TCP packets on ports 80 and 443
